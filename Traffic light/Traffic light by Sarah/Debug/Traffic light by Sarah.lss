
Traffic light by Sarah.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000074a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000074a  000007de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080007c  0080007c  000007fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001893  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a1  00000000  00000000  000022ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c88  00000000  00000000  00002c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  000038d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066b  00000000  00000000  00003be4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000071d  00000000  00000000  0000424f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000496c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 36 03 	jmp	0x66c	; 0x66c <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <main>
  8a:	0c 94 a3 03 	jmp	0x746	; 0x746 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPin_Direction>:
#include "DIO.h"
/*Function Implementations*/
/*Functions for PINS*/
void DIO_SetPin_Direction(Uint8t port, Uint8t pin, Uint8t direction)/*Define Direction for pin(Ip/Op)*/
{
	switch(direction)
  92:	44 23       	and	r20, r20
  94:	19 f0       	breq	.+6      	; 0x9c <DIO_SetPin_Direction+0xa>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	c9 f1       	breq	.+114    	; 0x10c <DIO_SetPin_Direction+0x7a>
  9a:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch(port)
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 f0       	breq	.+36     	; 0xc4 <DIO_SetPin_Direction+0x32>
  a0:	28 f0       	brcs	.+10     	; 0xac <DIO_SetPin_Direction+0x1a>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	d9 f0       	breq	.+54     	; 0xdc <DIO_SetPin_Direction+0x4a>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	29 f1       	breq	.+74     	; 0xf4 <DIO_SetPin_Direction+0x62>
  aa:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPin_Direction+0x26>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPin_Direction+0x22>
  bc:	80 95       	com	r24
  be:	82 23       	and	r24, r18
  c0:	8a bb       	out	0x1a, r24	; 26
			break;
  c2:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  c4:	27 b3       	in	r18, 0x17	; 23
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_SetPin_Direction+0x3e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_SetPin_Direction+0x3a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
			break;
  da:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  dc:	24 b3       	in	r18, 0x14	; 20
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPin_Direction+0x56>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPin_Direction+0x52>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	84 bb       	out	0x14, r24	; 20
			break;
  f2:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  f4:	21 b3       	in	r18, 0x11	; 17
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <DIO_SetPin_Direction+0x6e>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <DIO_SetPin_Direction+0x6a>
 104:	80 95       	com	r24
 106:	82 23       	and	r24, r18
 108:	81 bb       	out	0x11, r24	; 17
			break;
 10a:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch(port)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	89 f0       	breq	.+34     	; 0x132 <DIO_SetPin_Direction+0xa0>
 110:	28 f0       	brcs	.+10     	; 0x11c <DIO_SetPin_Direction+0x8a>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	c9 f0       	breq	.+50     	; 0x148 <DIO_SetPin_Direction+0xb6>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	11 f1       	breq	.+68     	; 0x15e <DIO_SetPin_Direction+0xcc>
 11a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPin_Direction+0x96>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPin_Direction+0x92>
 12c:	82 2b       	or	r24, r18
 12e:	8a bb       	out	0x1a, r24	; 26
			break;
 130:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPin_Direction+0xac>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPin_Direction+0xa8>
 142:	82 2b       	or	r24, r18
 144:	87 bb       	out	0x17, r24	; 23
			break;
 146:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPin_Direction+0xc2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPin_Direction+0xbe>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20
			break;
 15c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 15e:	21 b3       	in	r18, 0x11	; 17
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_SetPin_Direction+0xd8>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_SetPin_Direction+0xd4>
 16e:	82 2b       	or	r24, r18
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret

00000174 <DIO_SetPin_Value>:
		break;
	}
}
void DIO_SetPin_Value(Uint8t port, Uint8t pin, Uint8t value)/*Output Mode*/
{
	switch(value)
 174:	44 23       	and	r20, r20
 176:	19 f0       	breq	.+6      	; 0x17e <DIO_SetPin_Value+0xa>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	c9 f1       	breq	.+114    	; 0x1ee <DIO_SetPin_Value+0x7a>
 17c:	08 95       	ret
	{
		case DIO_PIN_LOW:
		switch (port)
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	91 f0       	breq	.+36     	; 0x1a6 <DIO_SetPin_Value+0x32>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_SetPin_Value+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	d9 f0       	breq	.+54     	; 0x1be <DIO_SetPin_Value+0x4a>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	29 f1       	breq	.+74     	; 0x1d6 <DIO_SetPin_Value+0x62>
 18c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 18e:	2b b3       	in	r18, 0x1b	; 27
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_SetPin_Value+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_SetPin_Value+0x22>
 19e:	80 95       	com	r24
 1a0:	82 23       	and	r24, r18
 1a2:	8b bb       	out	0x1b, r24	; 27
			break;
 1a4:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPin_Value+0x3e>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPin_Value+0x3a>
 1b6:	80 95       	com	r24
 1b8:	82 23       	and	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
			break;
 1bc:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 1be:	25 b3       	in	r18, 0x15	; 21
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SetPin_Value+0x56>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SetPin_Value+0x52>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	85 bb       	out	0x15, r24	; 21
			break;
 1d4:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1d6:	22 b3       	in	r18, 0x12	; 18
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_SetPin_Value+0x6e>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_SetPin_Value+0x6a>
 1e6:	80 95       	com	r24
 1e8:	82 23       	and	r24, r18
 1ea:	82 bb       	out	0x12, r24	; 18
			break;
 1ec:	08 95       	ret
		}
		break;
		case DIO_PIN_HIGH:
		switch (port)
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	89 f0       	breq	.+34     	; 0x214 <DIO_SetPin_Value+0xa0>
 1f2:	28 f0       	brcs	.+10     	; 0x1fe <DIO_SetPin_Value+0x8a>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	c9 f0       	breq	.+50     	; 0x22a <DIO_SetPin_Value+0xb6>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	11 f1       	breq	.+68     	; 0x240 <DIO_SetPin_Value+0xcc>
 1fc:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 1fe:	2b b3       	in	r18, 0x1b	; 27
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPin_Value+0x96>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPin_Value+0x92>
 20e:	82 2b       	or	r24, r18
 210:	8b bb       	out	0x1b, r24	; 27
			break;
 212:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 214:	28 b3       	in	r18, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPin_Value+0xac>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPin_Value+0xa8>
 224:	82 2b       	or	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
			break;
 228:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 22a:	25 b3       	in	r18, 0x15	; 21
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPin_Value+0xc2>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPin_Value+0xbe>
 23a:	82 2b       	or	r24, r18
 23c:	85 bb       	out	0x15, r24	; 21
			break;
 23e:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 240:	22 b3       	in	r18, 0x12	; 18
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_SetPin_Value+0xd8>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_SetPin_Value+0xd4>
 250:	82 2b       	or	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <LCD_Write_Command>:
	#else
	#warning "Wrong Mode"
	#endif
}
void LCD_Write_Command(Uint8t command)
{
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
	/*Control of LCD*/
	/*RS is Logic low to write inside control register*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RS, DIO_PIN_LOW);
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*RW is logic low to write on LCD*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RW, DIO_PIN_LOW);
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*be sure that enable low before send command*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*Write High Nipple of the command*/
	//PORTA = Get_HIGH_Nibble(command) | (PORTA & 0x0F);
	PORTA = (command & 0xF0) | (PORTA & 0x0F);
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	9c 2f       	mov	r25, r28
 27c:	90 7f       	andi	r25, 0xF0	; 240
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	89 2b       	or	r24, r25
 282:	8b bb       	out	0x1b, r24	; 27
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	63 e0       	ldi	r22, 0x03	; 3
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	8f e9       	ldi	r24, 0x9F	; 159
 290:	9f e0       	ldi	r25, 0x0F	; 15
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <LCD_Write_Command+0x3c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_Write_Command+0x42>
 298:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	63 e0       	ldi	r22, 0x03	; 3
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	
	/*Write Low Nipple of the command*/
	//PORTA = Get_LOW_Nibble(command) | (PORTA & 0x0F);
	PORTA = (command  << 4) | (PORTA & 0x0F);
 2a4:	2b b3       	in	r18, 0x1b	; 27
 2a6:	30 e1       	ldi	r19, 0x10	; 16
 2a8:	c3 9f       	mul	r28, r19
 2aa:	c0 01       	movw	r24, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	92 2f       	mov	r25, r18
 2b0:	9f 70       	andi	r25, 0x0F	; 15
 2b2:	89 2b       	or	r24, r25
 2b4:	8b bb       	out	0x1b, r24	; 27
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	63 e0       	ldi	r22, 0x03	; 3
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 2c0:	8f e9       	ldi	r24, 0x9F	; 159
 2c2:	9f e0       	ldi	r25, 0x0F	; 15
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <LCD_Write_Command+0x6e>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <LCD_Write_Command+0x74>
 2ca:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	63 e0       	ldi	r22, 0x03	; 3
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 2d6:	8f e1       	ldi	r24, 0x1F	; 31
 2d8:	9e e4       	ldi	r25, 0x4E	; 78
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_Write_Command+0x84>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_Write_Command+0x8a>
 2e0:	00 00       	nop
	_delay_ms(5);
}
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <LCD_Init>:
#include "LCD.h"

void LCD_Init(void)
{
	#if LCD_Mode == 4
	DIO_SetPin_Direction(LCD_4BIT_CMD_PORT, LCD_RS, LCD_OUTPUT);
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_CMD_PORT, LCD_RW, LCD_OUTPUT);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	62 e0       	ldi	r22, 0x02	; 2
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_CMD_PORT, LCD_EN, LCD_OUTPUT);
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA4, LCD_OUTPUT);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	64 e0       	ldi	r22, 0x04	; 4
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA5, LCD_OUTPUT);
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA6, LCD_OUTPUT);
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	66 e0       	ldi	r22, 0x06	; 6
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
	DIO_SetPin_Direction(LCD_4BIT_DTA_PORT, LCD_DTA7, LCD_OUTPUT);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	67 e0       	ldi	r22, 0x07	; 7
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	81 ee       	ldi	r24, 0xE1	; 225
 330:	94 e0       	ldi	r25, 0x04	; 4
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <LCD_Init+0x4c>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <LCD_Init+0x56>
 33c:	00 00       	nop
	_delay_ms(100);
	LCD_Write_Command(0x02);
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Write_Command>
	LCD_Write_Command(0x33);
 344:	83 e3       	ldi	r24, 0x33	; 51
 346:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Write_Command>
	LCD_Write_Command(0x32);
 34a:	82 e3       	ldi	r24, 0x32	; 50
 34c:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Write_Command>
	LCD_Write_Command(0x28);
 350:	88 e2       	ldi	r24, 0x28	; 40
 352:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Write_Command>
	LCD_Write_Command(0x0C);
 356:	8c e0       	ldi	r24, 0x0C	; 12
 358:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Write_Command>
	LCD_Write_Command(0x01);
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Write_Command>
	LCD_Write_Command(0x06);
 362:	86 e0       	ldi	r24, 0x06	; 6
 364:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Write_Command>
 368:	08 95       	ret

0000036a <LCD_Write_Data>:
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
	_delay_ms(5);
}
void LCD_Write_Data(Uint8t data)
{
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
	/*Control of LCD*/
	/*RS is Logic low to write inside control register*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RS, DIO_PIN_HIGH);
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*RW is logic low to write on LCD*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_RW, DIO_PIN_LOW);
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*be sure that enable low before send command*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	63 e0       	ldi	r22, 0x03	; 3
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	/*Write High Nipple of the command*/
	//PORTA = Get_HIGH_Nibble(data) | (PORTA & 0x0F);
	PORTA = (data & 0xF0) | (PORTA & 0x0F);
 38c:	8b b3       	in	r24, 0x1b	; 27
 38e:	9c 2f       	mov	r25, r28
 390:	90 7f       	andi	r25, 0xF0	; 240
 392:	8f 70       	andi	r24, 0x0F	; 15
 394:	89 2b       	or	r24, r25
 396:	8b bb       	out	0x1b, r24	; 27
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	63 e0       	ldi	r22, 0x03	; 3
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 3a2:	8f e9       	ldi	r24, 0x9F	; 159
 3a4:	9f e0       	ldi	r25, 0x0F	; 15
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <LCD_Write_Data+0x3c>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <LCD_Write_Data+0x42>
 3ac:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 3ae:	40 e0       	ldi	r20, 0x00	; 0
 3b0:	63 e0       	ldi	r22, 0x03	; 3
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
	
	/*Write Low Nipple of the command*/
	//PORTA = Get_LOW_Nibble(data) | (PORTA & 0x0F);
	PORTA = (data << 4) | (PORTA & 0x0F);
 3b8:	2b b3       	in	r18, 0x1b	; 27
 3ba:	30 e1       	ldi	r19, 0x10	; 16
 3bc:	c3 9f       	mul	r28, r19
 3be:	c0 01       	movw	r24, r0
 3c0:	11 24       	eor	r1, r1
 3c2:	92 2f       	mov	r25, r18
 3c4:	9f 70       	andi	r25, 0x0F	; 15
 3c6:	89 2b       	or	r24, r25
 3c8:	8b bb       	out	0x1b, r24	; 27
	//PORTA = (data & 0xF0) | (PORTA & 0x0F);
	/*Send High Pulse by using Enable*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_HIGH);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	63 e0       	ldi	r22, 0x03	; 3
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 3d4:	8f e9       	ldi	r24, 0x9F	; 159
 3d6:	9f e0       	ldi	r25, 0x0F	; 15
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <LCD_Write_Data+0x6e>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <LCD_Write_Data+0x74>
 3de:	00 00       	nop
	_delay_ms(1);/*Delay for only 1 millisecond*/
	DIO_SetPin_Value(LCD_4BIT_CMD_PORT, LCD_EN, DIO_PIN_LOW);
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	63 e0       	ldi	r22, 0x03	; 3
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 3ea:	8f e1       	ldi	r24, 0x1F	; 31
 3ec:	9e e4       	ldi	r25, 0x4E	; 78
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <LCD_Write_Data+0x84>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <LCD_Write_Data+0x8a>
 3f4:	00 00       	nop
	_delay_ms(5);
}
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <LCD_Clear>:
void LCD_Clear(void)
{
	LCD_Write_Command(0x01);
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Write_Command>
 400:	08 95       	ret

00000402 <LCD_Write_String>:
}
void LCD_Write_String(Uint8t* str)/**/
{
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	ec 01       	movw	r28, r24
	while(*str != '\0')
 408:	88 81       	ld	r24, Y
 40a:	88 23       	and	r24, r24
 40c:	61 f0       	breq	.+24     	; 0x426 <LCD_Write_String+0x24>
 40e:	8f e9       	ldi	r24, 0x9F	; 159
 410:	9f e0       	ldi	r25, 0x0F	; 15
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <LCD_Write_String+0x10>
 416:	00 c0       	rjmp	.+0      	; 0x418 <LCD_Write_String+0x16>
 418:	00 00       	nop
	{
		_delay_ms(1);
		LCD_Write_Data(*str);
 41a:	89 91       	ld	r24, Y+
 41c:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_Write_Data>
{
	LCD_Write_Command(0x01);
}
void LCD_Write_String(Uint8t* str)/**/
{
	while(*str != '\0')
 420:	88 81       	ld	r24, Y
 422:	81 11       	cpse	r24, r1
 424:	f4 cf       	rjmp	.-24     	; 0x40e <LCD_Write_String+0xc>
	{
		_delay_ms(1);
		LCD_Write_Data(*str);
		str++;
	}
}
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <LCD_Write_Number>:
void LCD_Write_Number(Uint32t number)/**/
{
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
 434:	2a 97       	sbiw	r28, 0x0a	; 10
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	f8 94       	cli
 43a:	de bf       	out	0x3e, r29	; 62
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	cd bf       	out	0x3d, r28	; 61
	Uint8t num[10];
	//itoa(number,(char*)num,10);//Integer
	ltoa(number,(Uint8t*)num,10);//Number need to print, Empty character string to fill with numbers, enter base needed, Long
 440:	2a e0       	ldi	r18, 0x0A	; 10
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	ae 01       	movw	r20, r28
 446:	4f 5f       	subi	r20, 0xFF	; 255
 448:	5f 4f       	sbci	r21, 0xFF	; 255
 44a:	0e 94 57 03 	call	0x6ae	; 0x6ae <ltoa>
	LCD_Write_String(num);
 44e:	ce 01       	movw	r24, r28
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Write_String>
 456:	2a 96       	adiw	r28, 0x0a	; 10
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	cd bf       	out	0x3d, r28	; 61
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <LED0_Init>:
	DIO_SetPin_Value(DIO_PORTC,DIO_PIN7,DIO_PIN_LOW);
}
void LED1_TGL(void){
	
	
	DIO_TogglePin(DIO_PORTC,DIO_PIN7);
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	62 e0       	ldi	r22, 0x02	; 2
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 472:	08 95       	ret

00000474 <LED0_ON>:
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	62 e0       	ldi	r22, 0x02	; 2
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 47e:	08 95       	ret

00000480 <LED0_OFF>:
 480:	40 e0       	ldi	r20, 0x00	; 0
 482:	62 e0       	ldi	r22, 0x02	; 2
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 48a:	08 95       	ret

0000048c <LED1_Init>:
 48c:	41 e0       	ldi	r20, 0x01	; 1
 48e:	67 e0       	ldi	r22, 0x07	; 7
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 496:	08 95       	ret

00000498 <LED1_ON>:
 498:	41 e0       	ldi	r20, 0x01	; 1
 49a:	67 e0       	ldi	r22, 0x07	; 7
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 4a2:	08 95       	ret

000004a4 <LED1_OFF>:
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	67 e0       	ldi	r22, 0x07	; 7
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 4ae:	08 95       	ret

000004b0 <LED2_Init>:
}
/*led2*/
void LED2_Init(void){
	
		DIO_SetPin_Direction(DIO_PORTD ,DIO_PIN3 ,DIO_PIN_OUTPUT);
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	63 e0       	ldi	r22, 0x03	; 3
 4b4:	83 e0       	ldi	r24, 0x03	; 3
 4b6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPin_Direction>
 4ba:	08 95       	ret

000004bc <LED2_ON>:
}
void LED2_ON(void){
	
	DIO_SetPin_Value(DIO_PORTD,DIO_PIN3,DIO_PIN_HIGH);
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	63 e0       	ldi	r22, 0x03	; 3
 4c0:	83 e0       	ldi	r24, 0x03	; 3
 4c2:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 4c6:	08 95       	ret

000004c8 <LED2_OFF>:
}
void LED2_OFF(void){
	
	DIO_SetPin_Value(DIO_PORTD,DIO_PIN3,DIO_PIN_LOW);
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	63 e0       	ldi	r22, 0x03	; 3
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPin_Value>
 4d2:	08 95       	ret

000004d4 <main>:
volatile Uint8t counter1=0;
  volatile Uint8t counter_green=10;
volatile  Uint8t counter_yellow=5;
 volatile Uint8t counter_red=7;
int main(void)
{    LED0_Init();
 4d4:	0e 94 34 02 	call	0x468	; 0x468 <LED0_Init>
	 LED1_Init();
 4d8:	0e 94 46 02 	call	0x48c	; 0x48c <LED1_Init>
	 LED2_Init();
 4dc:	0e 94 58 02 	call	0x4b0	; 0x4b0 <LED2_Init>
	 LCD_Init();
 4e0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_Init>
	// TIMER0_Init();
	//TIMER0_START();
	 
	 
	//TIMER0_CTC_DELAY(5, 78);
	 timer_CTC_init_interrupt();
 4e4:	0e 94 47 03 	call	0x68e	; 0x68e <timer_CTC_init_interrupt>
    /* Replace with your application code */
    while (1) 
    {
		
		counter_green=10;
 4e8:	0a e0       	ldi	r16, 0x0A	; 10
		counter_yellow=5;
 4ea:	15 e0       	ldi	r17, 0x05	; 5
		counter_red=7;
 4ec:	d7 e0       	ldi	r29, 0x07	; 7
				{
					counter1=0;
					counter_green--;
					LCD_Write_Command(0X01);
					LCD_Write_String(" ");
					LCD_Write_Number((counter_green%10));
 4ee:	cd ec       	ldi	r28, 0xCD	; 205
	 timer_CTC_init_interrupt();
    /* Replace with your application code */
    while (1) 
    {
		
		counter_green=10;
 4f0:	00 93 62 00 	sts	0x0062, r16	; 0x800062 <counter_green>
		counter_yellow=5;
 4f4:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <counter_yellow>
		counter_red=7;
 4f8:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <__data_start>
		
		 LCD_Clear();
 4fc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_Clear>
		 LCD_Write_String(" 10 SEC");
 500:	83 e6       	ldi	r24, 0x63	; 99
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Write_String>
		 LED0_ON();
 508:	0e 94 3a 02 	call	0x474	; 0x474 <LED0_ON>
		while(counter_green>0)
 50c:	25 c0       	rjmp	.+74     	; 0x558 <main+0x84>
		{
				if(counter1>=100)
 50e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 512:	84 36       	cpi	r24, 0x64	; 100
 514:	08 f1       	brcs	.+66     	; 0x558 <main+0x84>
				{
					counter1=0;
 516:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
					counter_green--;
 51a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter_green>
 51e:	81 50       	subi	r24, 0x01	; 1
 520:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter_green>
					LCD_Write_Command(0X01);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Write_Command>
					LCD_Write_String(" ");
 52a:	8b e6       	ldi	r24, 0x6B	; 107
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Write_String>
					LCD_Write_Number((counter_green%10));
 532:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <counter_green>
 536:	6c 9f       	mul	r22, r28
 538:	81 2d       	mov	r24, r1
 53a:	11 24       	eor	r1, r1
 53c:	86 95       	lsr	r24
 53e:	86 95       	lsr	r24
 540:	86 95       	lsr	r24
 542:	88 0f       	add	r24, r24
 544:	98 2f       	mov	r25, r24
 546:	99 0f       	add	r25, r25
 548:	99 0f       	add	r25, r25
 54a:	89 0f       	add	r24, r25
 54c:	68 1b       	sub	r22, r24
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_Number>
		counter_red=7;
		
		 LCD_Clear();
		 LCD_Write_String(" 10 SEC");
		 LED0_ON();
		while(counter_green>0)
 558:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter_green>
 55c:	81 11       	cpse	r24, r1
 55e:	d7 cf       	rjmp	.-82     	; 0x50e <main+0x3a>
 560:	2f ef       	ldi	r18, 0xFF	; 255
 562:	80 e7       	ldi	r24, 0x70	; 112
 564:	92 e0       	ldi	r25, 0x02	; 2
 566:	21 50       	subi	r18, 0x01	; 1
 568:	80 40       	sbci	r24, 0x00	; 0
 56a:	90 40       	sbci	r25, 0x00	; 0
 56c:	e1 f7       	brne	.-8      	; 0x566 <main+0x92>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <main+0x9c>
 570:	00 00       	nop
					// LCD_Write_Number(10);
				}
		}
		// TIMER0_SET_DELAY(500);
		_delay_ms(50);
		 LED1_ON();
 572:	0e 94 4c 02 	call	0x498	; 0x498 <LED1_ON>
		 LED0_OFF();
 576:	0e 94 40 02 	call	0x480	; 0x480 <LED0_OFF>
		 LCD_Clear();
 57a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_Clear>
		 LCD_Write_String(" 5 SEC");
 57e:	8d e6       	ldi	r24, 0x6D	; 109
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Write_String>
		while(counter_yellow>0)
 586:	25 c0       	rjmp	.+74     	; 0x5d2 <main+0xfe>
		{
				if(counter1>=100)
 588:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 58c:	84 36       	cpi	r24, 0x64	; 100
 58e:	08 f1       	brcs	.+66     	; 0x5d2 <main+0xfe>
				{
					counter1=0;
 590:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
					counter_yellow--;
 594:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter_yellow>
 598:	81 50       	subi	r24, 0x01	; 1
 59a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counter_yellow>
					LCD_Write_Command(0X01);
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Write_Command>
					LCD_Write_String(" ");
 5a4:	8b e6       	ldi	r24, 0x6B	; 107
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Write_String>
					LCD_Write_Number((counter_yellow%10));
 5ac:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <counter_yellow>
 5b0:	6c 9f       	mul	r22, r28
 5b2:	81 2d       	mov	r24, r1
 5b4:	11 24       	eor	r1, r1
 5b6:	86 95       	lsr	r24
 5b8:	86 95       	lsr	r24
 5ba:	86 95       	lsr	r24
 5bc:	88 0f       	add	r24, r24
 5be:	98 2f       	mov	r25, r24
 5c0:	99 0f       	add	r25, r25
 5c2:	99 0f       	add	r25, r25
 5c4:	89 0f       	add	r24, r25
 5c6:	68 1b       	sub	r22, r24
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_Number>
		_delay_ms(50);
		 LED1_ON();
		 LED0_OFF();
		 LCD_Clear();
		 LCD_Write_String(" 5 SEC");
		while(counter_yellow>0)
 5d2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter_yellow>
 5d6:	81 11       	cpse	r24, r1
 5d8:	d7 cf       	rjmp	.-82     	; 0x588 <main+0xb4>
 5da:	2f ef       	ldi	r18, 0xFF	; 255
 5dc:	89 e6       	ldi	r24, 0x69	; 105
 5de:	98 e1       	ldi	r25, 0x18	; 24
 5e0:	21 50       	subi	r18, 0x01	; 1
 5e2:	80 40       	sbci	r24, 0x00	; 0
 5e4:	90 40       	sbci	r25, 0x00	; 0
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <main+0x10c>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <main+0x116>
 5ea:	00 00       	nop
					// LCD_Write_Number(5);
				}
		}
		//void TIMER0_SET_DELAY(500);
		_delay_ms(500);
		 LED2_ON();
 5ec:	0e 94 5e 02 	call	0x4bc	; 0x4bc <LED2_ON>
		 LED1_OFF();
 5f0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LED1_OFF>
		 LCD_Clear();
 5f4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LCD_Clear>
		 LCD_Write_String(" 7 SEC");
 5f8:	84 e7       	ldi	r24, 0x74	; 116
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Write_String>
		while(counter_red>0)
 600:	25 c0       	rjmp	.+74     	; 0x64c <main+0x178>
		{ if(counter1>=100)
 602:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 606:	84 36       	cpi	r24, 0x64	; 100
 608:	08 f1       	brcs	.+66     	; 0x64c <main+0x178>
			{
				counter1=0;
 60a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
				counter_red--;
 60e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 612:	81 50       	subi	r24, 0x01	; 1
 614:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
				LCD_Write_Command(0X01);
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_Write_Command>
				LCD_Write_String(" ");
 61e:	8b e6       	ldi	r24, 0x6B	; 107
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Write_String>
				LCD_Write_Number((counter_red%10));
 626:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 62a:	6c 9f       	mul	r22, r28
 62c:	81 2d       	mov	r24, r1
 62e:	11 24       	eor	r1, r1
 630:	86 95       	lsr	r24
 632:	86 95       	lsr	r24
 634:	86 95       	lsr	r24
 636:	88 0f       	add	r24, r24
 638:	98 2f       	mov	r25, r24
 63a:	99 0f       	add	r25, r25
 63c:	99 0f       	add	r25, r25
 63e:	89 0f       	add	r24, r25
 640:	68 1b       	sub	r22, r24
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 16 02 	call	0x42c	; 0x42c <LCD_Write_Number>
		_delay_ms(500);
		 LED2_ON();
		 LED1_OFF();
		 LCD_Clear();
		 LCD_Write_String(" 7 SEC");
		while(counter_red>0)
 64c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 650:	81 11       	cpse	r24, r1
 652:	d7 cf       	rjmp	.-82     	; 0x602 <main+0x12e>
 654:	2f ef       	ldi	r18, 0xFF	; 255
 656:	89 e6       	ldi	r24, 0x69	; 105
 658:	98 e1       	ldi	r25, 0x18	; 24
 65a:	21 50       	subi	r18, 0x01	; 1
 65c:	80 40       	sbci	r24, 0x00	; 0
 65e:	90 40       	sbci	r25, 0x00	; 0
 660:	e1 f7       	brne	.-8      	; 0x65a <main+0x186>
 662:	00 c0       	rjmp	.+0      	; 0x664 <main+0x190>
 664:	00 00       	nop
				
			}
		}
		
		_delay_ms(500);
		 LED2_OFF();
 666:	0e 94 64 02 	call	0x4c8	; 0x4c8 <LED2_OFF>
	}
 66a:	42 cf       	rjmp	.-380    	; 0x4f0 <main+0x1c>

0000066c <__vector_10>:
	
}


ISR(TIMER0_COMP_vect)
{
 66c:	1f 92       	push	r1
 66e:	0f 92       	push	r0
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	0f 92       	push	r0
 674:	11 24       	eor	r1, r1
 676:	8f 93       	push	r24
	
	counter1++;
 678:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
 67c:	8f 5f       	subi	r24, 0xFF	; 255
 67e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>


	
}
 682:	8f 91       	pop	r24
 684:	0f 90       	pop	r0
 686:	0f be       	out	0x3f, r0	; 63
 688:	0f 90       	pop	r0
 68a:	1f 90       	pop	r1
 68c:	18 95       	reti

0000068e <timer_CTC_init_interrupt>:
	
}
void timer_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
 68e:	83 b7       	in	r24, 0x33	; 51
 690:	88 60       	ori	r24, 0x08	; 8
 692:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=78;
 694:	8e e4       	ldi	r24, 0x4E	; 78
 696:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
 698:	83 b7       	in	r24, 0x33	; 51
 69a:	81 60       	ori	r24, 0x01	; 1
 69c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 69e:	83 b7       	in	r24, 0x33	; 51
 6a0:	84 60       	ori	r24, 0x04	; 4
 6a2:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	sei();
 6a4:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 6a6:	89 b7       	in	r24, 0x39	; 57
 6a8:	82 60       	ori	r24, 0x02	; 2
 6aa:	89 bf       	out	0x39, r24	; 57
 6ac:	08 95       	ret

000006ae <ltoa>:
 6ae:	25 32       	cpi	r18, 0x25	; 37
 6b0:	31 05       	cpc	r19, r1
 6b2:	20 f4       	brcc	.+8      	; 0x6bc <ltoa+0xe>
 6b4:	22 30       	cpi	r18, 0x02	; 2
 6b6:	10 f0       	brcs	.+4      	; 0x6bc <ltoa+0xe>
 6b8:	0c 94 62 03 	jmp	0x6c4	; 0x6c4 <__ltoa_ncheck>
 6bc:	fa 01       	movw	r30, r20
 6be:	10 82       	st	Z, r1
 6c0:	ca 01       	movw	r24, r20
 6c2:	08 95       	ret

000006c4 <__ltoa_ncheck>:
 6c4:	bb 27       	eor	r27, r27
 6c6:	2a 30       	cpi	r18, 0x0A	; 10
 6c8:	51 f4       	brne	.+20     	; 0x6de <__ltoa_ncheck+0x1a>
 6ca:	99 23       	and	r25, r25
 6cc:	42 f4       	brpl	.+16     	; 0x6de <__ltoa_ncheck+0x1a>
 6ce:	bd e2       	ldi	r27, 0x2D	; 45
 6d0:	90 95       	com	r25
 6d2:	80 95       	com	r24
 6d4:	70 95       	com	r23
 6d6:	61 95       	neg	r22
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	8f 4f       	sbci	r24, 0xFF	; 255
 6dc:	9f 4f       	sbci	r25, 0xFF	; 255
 6de:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__ultoa_common>

000006e2 <__ultoa_ncheck>:
 6e2:	bb 27       	eor	r27, r27

000006e4 <__ultoa_common>:
 6e4:	fa 01       	movw	r30, r20
 6e6:	a6 2f       	mov	r26, r22
 6e8:	62 17       	cp	r22, r18
 6ea:	71 05       	cpc	r23, r1
 6ec:	81 05       	cpc	r24, r1
 6ee:	91 05       	cpc	r25, r1
 6f0:	33 0b       	sbc	r19, r19
 6f2:	30 fb       	bst	r19, 0
 6f4:	66 f0       	brts	.+24     	; 0x70e <__ultoa_common+0x2a>
 6f6:	aa 27       	eor	r26, r26
 6f8:	66 0f       	add	r22, r22
 6fa:	77 1f       	adc	r23, r23
 6fc:	88 1f       	adc	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	aa 1f       	adc	r26, r26
 702:	a2 17       	cp	r26, r18
 704:	10 f0       	brcs	.+4      	; 0x70a <__ultoa_common+0x26>
 706:	a2 1b       	sub	r26, r18
 708:	63 95       	inc	r22
 70a:	38 50       	subi	r19, 0x08	; 8
 70c:	a9 f7       	brne	.-22     	; 0x6f8 <__ultoa_common+0x14>
 70e:	a0 5d       	subi	r26, 0xD0	; 208
 710:	aa 33       	cpi	r26, 0x3A	; 58
 712:	08 f0       	brcs	.+2      	; 0x716 <__ultoa_common+0x32>
 714:	a9 5d       	subi	r26, 0xD9	; 217
 716:	a1 93       	st	Z+, r26
 718:	36 f7       	brtc	.-52     	; 0x6e6 <__ultoa_common+0x2>
 71a:	b1 11       	cpse	r27, r1
 71c:	b1 93       	st	Z+, r27
 71e:	10 82       	st	Z, r1
 720:	ca 01       	movw	r24, r20
 722:	0c 94 93 03 	jmp	0x726	; 0x726 <strrev>

00000726 <strrev>:
 726:	dc 01       	movw	r26, r24
 728:	fc 01       	movw	r30, r24
 72a:	67 2f       	mov	r22, r23
 72c:	71 91       	ld	r23, Z+
 72e:	77 23       	and	r23, r23
 730:	e1 f7       	brne	.-8      	; 0x72a <strrev+0x4>
 732:	32 97       	sbiw	r30, 0x02	; 2
 734:	04 c0       	rjmp	.+8      	; 0x73e <strrev+0x18>
 736:	7c 91       	ld	r23, X
 738:	6d 93       	st	X+, r22
 73a:	70 83       	st	Z, r23
 73c:	62 91       	ld	r22, -Z
 73e:	ae 17       	cp	r26, r30
 740:	bf 07       	cpc	r27, r31
 742:	c8 f3       	brcs	.-14     	; 0x736 <strrev+0x10>
 744:	08 95       	ret

00000746 <_exit>:
 746:	f8 94       	cli

00000748 <__stop_program>:
 748:	ff cf       	rjmp	.-2      	; 0x748 <__stop_program>
